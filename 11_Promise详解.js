// 在ES6中, 提供一个类, Promise
// 在new Promise 时需要传入一个执行器, 执行器是立刻执行的
// 刚刚创建出来的Promise处于等待状态
// 执行器有两个参数 resolve & reject
// resolve是一个函数 调用此函数可以把等待的Promise变成 成功的Promise
// reject是一个函数 调用此函数可以把等待的Promise变成 失败的Promise

// 一般都在执行器中写异步代码
let p = new Promise((resolve, reject) => {
    console.log("hello Promise...");
})
console.log(p);  // Promise { <pending> }  // padding=>等待




// Promise只能从 等待=>成功 或者 等待=>失败
// 失败了就不能成功了, 成功了就不能失败了


// 1.成功:
let p1 = new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve("成功-终值")
        console.log(p1);  // Promise {<fulfilled>: '成功-终值'}
    }, 3000)
})


// 2.失败:
let p2 = new Promise((resolve, reject) => {
    setTimeout(() => {
        reject("失败-拒因")
        console.log(p2);  // Promise {<rejected>: '失败-拒因'}
    }, 3000)
})




//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------



// Promise的简单使用
function execCode(counter) {
    let promise = new Promise((resolve, reject) => {
        setTimeout(() => {
            if (counter > 0) {
                let t = 0
                for (let i = 0; i < counter; i++) {
                    t += i
                }
                // 成功的结果t
                resolve(t)
            } else {
                reject(`输入${counter}有误`)
            }
        }, 3000)
    })
    return promise
}

// promise是一个对象对象中有一个方法, 叫then
// 通过then方法, 就可以得到成功的或失败的结果then需要传递两个回调函数
// 如果promise成功了, 调用第1个回调函数
// 如果promise失败了, 调用第2个回调函数
// 调第1个, 这个回调函数的参数, 就是成功的结果
// 调第2个, 这个回调函数的参数, 就是失败的结果

let promise = execCode(-100)
promise.then((resolve_value) => {
    console.log("成功的结果: " + resolve_value);  // 成功的结果: 4950
}, (reject_reason) => {
    console.log("失败的原因: " + reject_reason);  // 失败的原因: 输入-100有误
})




//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------